# FINAL, FULLY AUTOMATED WORKFLOW

name: Deploy Interactive POC to Azure

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push All Docker Images
        run: |
          TAG=${{ github.sha }}
          ACR=${{ secrets.ACR_LOGIN_SERVER }}
          docker build -t $ACR/nginx:$TAG ./nginx && docker push $ACR/nginx:$TAG
          docker build -t $ACR/frontend:$TAG ./frontend && docker push $ACR/frontend:$TAG
          docker build -t $ACR/data-api:$TAG ./data-api && docker push $ACR/data-api:$TAG
          docker build -t $ACR/status-api:$TAG ./status-api && docker push $ACR/status-api:$TAG
          docker build -t $ACR/action-api:$TAG ./action-api && docker push $ACR/action-api:$TAG

      # THIS IS THE NEW STEP THAT FIXES EVERYTHING
      # It creates a hardcoded deploy file during the run.
      - name: Generate Production Compose File
        run: |
          # Copy the template to a new file that we will deploy
          cp docker-compose.template.yml docker-compose.deploy.yml
          
          # Use the 'sed' command (a standard linux tool) to find and replace the placeholders
          sed -i 's|__ACR_LOGIN_SERVER__|${{ secrets.ACR_LOGIN_SERVER }}|g' docker-compose.deploy.yml
          sed -i 's|__TAG__|${{ github.sha }}|g' docker-compose.deploy.yml

      # The final step now uses the newly generated, fully hardcoded file
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.WEBAPP_NAME }}
          configuration-file: ./docker-compose.deploy.yml